import ballerina/grpc;

public type recordMgtBlockingClient client object {

    *grpc:AbstractClientEndpoint;

    private grpc:Client grpcClient;

    public function __init(string url, grpc:ClientConfiguration? config = ()) {
        // initialize client endpoint.
        self.grpcClient = new(url, config);
        checkpanic self.grpcClient.initStub(self, "blocking", ROOT_DESCRIPTOR, getDescriptorMap());
    }

    public remote function writeRecord(Record req, grpc:Headers? headers = ()) returns ([Confirmation, grpc:Headers]|grpc:Error) {
        
        var payload = check self.grpcClient->blockingExecute("service.recordMgt/writeRecord", req, headers);
        grpc:Headers resHeaders = new;
        anydata result = ();
        [result, resHeaders] = payload;
        
        return [<Confirmation>result, resHeaders];
        
    }

    public remote function updateRecord(Record req, grpc:Headers? headers = ()) returns ([Confirmation, grpc:Headers]|grpc:Error) {
        
        var payload = check self.grpcClient->blockingExecute("service.recordMgt/updateRecord", req, headers);
        grpc:Headers resHeaders = new;
        anydata result = ();
        [result, resHeaders] = payload;
        
        return [<Confirmation>result, resHeaders];
        
    }

    public remote function readRecord(ReadRequest req, grpc:Headers? headers = ()) returns ([Record, grpc:Headers]|grpc:Error) {
        
        var payload = check self.grpcClient->blockingExecute("service.recordMgt/readRecord", req, headers);
        grpc:Headers resHeaders = new;
        anydata result = ();
        [result, resHeaders] = payload;
        
        return [<Record>result, resHeaders];
        
    }

    public remote function readRecordByCriterion(Criterion req, service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        
        return self.grpcClient->nonBlockingExecute("service.recordMgt/readRecordByCriterion", req, msgListener, headers);
    }

};

public type recordMgtClient client object {

    *grpc:AbstractClientEndpoint;

    private grpc:Client grpcClient;

    public function __init(string url, grpc:ClientConfiguration? config = ()) {
        // initialize client endpoint.
        self.grpcClient = new(url, config);
        checkpanic self.grpcClient.initStub(self, "non-blocking", ROOT_DESCRIPTOR, getDescriptorMap());
    }

    public remote function writeRecord(Record req, service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        
        return self.grpcClient->nonBlockingExecute("service.recordMgt/writeRecord", req, msgListener, headers);
    }

    public remote function updateRecord(Record req, service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        
        return self.grpcClient->nonBlockingExecute("service.recordMgt/updateRecord", req, msgListener, headers);
    }

    public remote function readRecord(ReadRequest req, service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        
        return self.grpcClient->nonBlockingExecute("service.recordMgt/readRecord", req, msgListener, headers);
    }

    public remote function readRecordByCriterion(Criterion req, service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        
        return self.grpcClient->nonBlockingExecute("service.recordMgt/readRecordByCriterion", req, msgListener, headers);
    }

};

public type Record record {|
    string date = "";
    Artist[] artists = [];
    string band = "";
    Song[] songs = [];
    string key = "";
    string 'version = "";
    
|};


public type Artist record {|
    string name = "";
    string member = "";
    
|};


public type Song record {|
    string title = "";
    string genre = "";
    string platform = "";
    
|};


public type ReadRequest record {|
    string key = "";
    string 'version = "";
    
|};


public type Criterion record {|
    string artist_name = "";
    string song_title = "";
    string band = "";
    string genre = "";
    
|};


public type Confirmation record {|
    string key = "";
    string 'version = "";
    
|};



const string
function getDescriptorMap() returns map<string> {
    return {
        "recordMgt.proto
        "google/protobuf/wrappers.proto
        
    };
}

